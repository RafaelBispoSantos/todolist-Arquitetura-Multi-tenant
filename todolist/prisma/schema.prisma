// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

// Fonte de dados - PostgreSQL
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Modelo de Tenant (Organização/Empresa)
model Tenant {
  id           String    @id @default(uuid())
  name         String
  subdomain    String    @unique
  // Personalização do tenant
  primaryColor String?   @default("#3b82f6")
  logoUrl      String?
  isActive     Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  
  // Relacionamentos
  users        User[]
  todos        Todo[]
  todoLists    TodoList[]
}

// Modelo de Usuário
model User {
  id        String   @id @default(uuid())
  email     String
  password  String
  name      String
  role      UserRole @default(USER)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relacionamentos com tenant
  tenantId  String
  tenant    Tenant   @relation(fields: [tenantId], references: [id])
  
  // Uma constraint única para garantir que o email seja único apenas dentro do tenant
  @@unique([email, tenantId])
  
  // Relacionamentos com outros modelos
  todos      Todo[]
  todoLists  TodoList[]
}

// Enum para roles de usuário
enum UserRole {
  ADMIN
  USER
}

// Modelo de TodoList (Listas de tarefas)
model TodoList {
  id          String    @id @default(uuid())
  title       String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relacionamentos com tenant
  tenantId    String
  tenant      Tenant    @relation(fields: [tenantId], references: [id])
  
  // Relacionamentos com usuário
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  
  // Relacionamentos com tarefas
  todos       Todo[]
}

// Modelo de Todo (Tarefas)
model Todo {
  id          String     @id @default(uuid())
  title       String
  description String?
  priority    Priority   @default(MEDIUM)
  status      TodoStatus @default(PENDING)
  dueDate     DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  // Relacionamentos com tenant
  tenantId    String
  tenant      Tenant     @relation(fields: [tenantId], references: [id])
  
  // Relacionamentos com usuário
  userId      String
  user        User       @relation(fields: [userId], references: [id])
  
  // Relacionamentos com lista de tarefas
  todoListId  String?
  todoList    TodoList?  @relation(fields: [todoListId], references: [id])
}

// Enum para status do Todo
enum TodoStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

// Enum para prioridade do Todo
enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}